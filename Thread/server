#!/usr/bin/env python3

import setup_path  # pylint: disable=unused-import
import sys
from time import sleep
from threading import Thread
from lib import constants as Constants
from lib.structures import BufferedWriter, Server


def handle_print(server: Server, bf: BufferedWriter):
    while not server.closed:
        bf.flush()
        sleep(2)


def handle_keyboard(server: Server):
    while True:
        text = sys.stdin.readline()
        if not text or (text == "q\n" and sys.stdin.isatty()):
            server.close()
            break


def handle_timer(server: Server):
    while not server.closed:
        server.prune_inactive_clients()
        sleep(Constants.TIMEOUT_INTERVAL)


def handle_socket(server: Server):
    while not server.closed:
        packet, remote_addr = server.receive_packet()
        if remote_addr is None:
            break
        server.handle_packet(packet, remote_addr)


def main():
    portnum = int(sys.argv[1])

    bf = BufferedWriter(sys.stdout.fileno(), "w", 5000000, "utf-8")
    server = Server(portnum, bf)

    bf.write(f"Waiting on port {portnum}...")

    t1 = Thread(target=handle_socket, args=(server,))
    t1.start()

    t2 = Thread(target=handle_timer, args=(server,))
    t2.start()

    t3 = Thread(target=handle_print, args=(
        server,
        bf,
    ))
    t3.start()

    handle_keyboard(server)

    bf.flush()


if __name__ == "__main__":
    main()
