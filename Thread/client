#!/usr/bin/env python3

import setup_path  # pylint: disable=unused-import
import sys
import time
from threading import Thread
from lib import constants as Constants
from lib.structures import Client


def handle_timer(client: Client):
    while not client.closed:
        client.check_timeout()
        time.sleep(Constants.TIMEOUT_INTERVAL)


def handle_keyboard(client: Client):
    while not client.closed:
        text = sys.stdin.readline()
        if not client.closed:
            # Terminates server if input is EOF or "q"
            if not text or (text == "q\n" and sys.stdin.isatty()):
                client.send_goodbye()
                break
            else:
                client.send_data(text)


def handle_socket(client: Client):
    while not client.closed:
        packet, remote_addr = client.receive_packet()
        if not client.closed:
            client.handle_packet(packet, remote_addr)


def main():
    hostname = sys.argv[1]
    portnum = int(sys.argv[2])

    client = Client(hostname, portnum)

    if client.hello_exchange():

        t1 = Thread(target=handle_socket, args=(client,))
        t1.start()

        t2 = Thread(target=handle_keyboard, args=(client,), daemon=True)
        t2.start()

        t3 = Thread(target=handle_timer, args=(client,))
        t3.start()

        # blocks current thread until a close signal was received
        client.wait_for_close_signal()
        client.close()

        t1.join()
        t3.join()
    else:
        print("Did not receive HELLO from server")


if __name__ == "__main__":
    main()
