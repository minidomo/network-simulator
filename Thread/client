#!/usr/bin/env python3
"""Thread-based client runner."""

import setup_path  # pylint: disable=unused-import
import sys
import time
from threading import Thread
from lib import constants as Constants
from lib.structures import Client


def handle_timer(client: Client):
    while not client.closed():
        client.timed_out()
        time.sleep(Constants.TIMEOUT_INTERVAL)


def handle_keyboard(client: Client):
    while not client.closed():
        text = sys.stdin.readline()
        if not client.closed():
            # Terminates server if input is EOF or "q"
            if not text or (text == "q\n" and sys.stdin.isatty()):
                client.send_goodbye()
                break
            else:
                client.send_data(text)


def handle_socket(client: Client):
    while not client.closed():
        packet, remote_addr = client.receive_packet()
        if not client.closed():
            client.handle_packet(packet, remote_addr)


def main():
    hostname = sys.argv[1]
    portnum = int(sys.argv[2])

    client = Client(hostname, portnum, Constants.TIMEOUT_INTERVAL)

    t1 = Thread(target=handle_socket, args=(client,))
    t1.start()

    t2 = Thread(target=handle_timer, args=(client,))
    t2.start()

    client.send_hello()
    signal = client.wait_for_signal()

    if signal == Constants.Signal.HELLO:
        t3 = Thread(target=handle_keyboard, args=(client,), daemon=True)
        t3.start()

        client.wait_for_signal()

    client.close()

    t1.join()
    t2.join()


if __name__ == "__main__":
    main()
