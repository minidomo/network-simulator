#!/usr/bin/env python3
"""Event-based client runner."""

import setup_path  # pylint: disable=unused-import
import sys
import pyuv
from lib import constants
from lib import EventClient

_loop = None
_client = None


def handle_keyboard(handle, data: "bytes|None", error) -> None:  # pylint: disable=unused-argument
    if _client is not None and not _client.closed() and not _client.is_waiting_for_hello():
        text = None if data is None else data.decode("utf-8", "replace")
        # Terminates server if input is EOF or "q"
        if not text or (text == "q\n" and sys.stdin.isatty()):
            _client.send_goodbye()
        else:
            _client.send_data(text)


def end_loop() -> None:

    def empty_event():
        pass

    end_loop_async = pyuv.Async(_loop, empty_event)

    _loop.stop()
    end_loop_async.send()


def main():
    global _client, _loop

    hostname = sys.argv[1]
    portnum = int(sys.argv[2])

    _loop = pyuv.Loop.default_loop()

    keyboard = pyuv.TTY(_loop, sys.stdin.fileno(), True)
    keyboard.start_read(handle_keyboard)

    _client = EventClient(hostname, portnum, constants.TIMEOUT_INTERVAL, _loop, end_loop)
    _client.send_hello()

    _loop.run()


if __name__ == "__main__":
    main()
