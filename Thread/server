#!/usr/bin/env python3

import sys
import socket
from threading import Thread
from typing import Any

sys.path.append(sys.path[0] + "/..")

from src import constants as Constants
from src.structures import ClientData
from src import util

_client_data_map: "dict[int, ClientData]" = {}
_max_length = 100
_count = 0
_socket: socket.socket = None


def send_packet(command: int, session_id: int, destination: Any, data: str = None):
    global _count

    data_msg = util.pack(command, _count, session_id, data)
    _socket.sendto(data_msg, destination)
    _count += 1


def server_close():
    for client_data in _client_data_map.values():
        send_packet(0, client_data.session_id, client_data.address)

    _socket.close()


def handle_keyboard():
    while True:
        text = sys.stdin.readline()
        # Terminates server if input is EOF or "q"
        if not text or (text == "q\n" and sys.stdin.isatty()):
            server_close()  # do gracefully end here
            break


def handle_socket():

    def log(session_id: int, seq: "int | None", msg: str):
        if (seq == None):
            print("0x%08x %s" % (session_id, msg))
        else:
            print("0x%08x [%d] %s" % (session_id, seq, msg))

    while True:
        packet, remote_addr = _socket.recvfrom(_max_length)

        packet_parts = packet.split(Constants.MAGIC_CHARACTER.encode("utf-8"), 1)
        packet_header = packet_parts[0]
        magic_num, _unused, command, seq, session_id = util.unpack(packet_header)

        if (magic_num == Constants.MAGIC_NUMBER):
            if command == Constants.Command.HELLO.value:
                if session_id in _client_data_map:
                    print("duplicate hello")
                    break
                _client_data_map[session_id] = ClientData(session_id, remote_addr)
                send_packet(Constants.Command.HELLO.value, session_id, remote_addr)
                log(session_id, seq, "HELLO from client.")
            elif command == Constants.Command.DATA.value:
                data = packet_parts[1].decode("utf-8")
                send_packet(Constants.Command.ALIVE.value, session_id, remote_addr)
                log(session_id, seq, "DATA from client. %s" % data)
            elif command == Constants.Command.GOODBYE.value:
                if session_id not in _client_data_map:
                    print("missing client data")
                    break
                send_packet(Constants.Command.GOODBYE.value, session_id, remote_addr)
                log(session_id, seq, "GOODBYE from client.")
                del _client_data_map[session_id]
            else:
                print("Invalid command: %d" % command)
                break


if __name__ == "__main__":
    portnum = int(sys.argv[1])
    address = (b"0.0.0.0", portnum)
    _socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    _socket.bind(address)

    print("Waiting on port %d..." % portnum)

    t1 = Thread(target=handle_socket, daemon=True)
    t1.start()

    handle_keyboard()
