#!/usr/bin/env python3

import sys
import socket
from threading import Thread, Timer
from typing import Any
import time

sys.path.append(sys.path[0] + "/..")

from src import constants as Constants
from src.structures import ClientData
from src import util

_client_data_map: "dict[int, ClientData]" = {}
_seq = 0
_socket: socket.socket = None


def send_packet(command: int, session_id: int, destination: Any, data: str = None):
    global _seq

    data_msg = util.pack(command, _seq, session_id, data)
    _socket.sendto(data_msg, destination)
    _seq += 1


def server_close():
    for client_data in _client_data_map.values():
        send_packet(0, client_data.session_id, client_data.address)

    try:
        _socket.shutdown(socket.SHUT_RDWR)
    except:
        pass
    _socket.close()


def handle_keyboard():
    while True:
        text = sys.stdin.readline()
        # Terminates server if input is EOF or "q"
        if not text or (text == "q\n" and sys.stdin.isatty()):
            server_close()  # do gracefully end here
            break


def close_client(session_id: int):
    global _client_data_map

    client = _client_data_map[session_id]
    send_packet(Constants.Command.GOODBYE.value, session_id, client.address)
    del _client_data_map[session_id]


def handle_timer():
    interval = 30
    ti = Timer(interval, handle_timer)
    ti.daemon = True
    ti.start()

    for session_id in list(_client_data_map.keys()):
        client = _client_data_map[session_id]
        if client.timestamp != -1 and time.time() - client.timestamp > interval:
            close_client(session_id)


def handle_socket():

    def log(session_id: int, seq: "int | None", msg: str):
        if (seq == None):
            print("0x%08x %s" % (session_id, msg))
        else:
            print("0x%08x [%d] %s" % (session_id, seq, msg))

    def check_client(session_id: int, seq: int):
        client = _client_data_map[session_id]
        if seq > client.packet_number + 1:
            for i in range(client.packet_number + 1, seq):
                log(session_id, i, "Lost Packet!")
        elif seq == client.packet_number:
            log(session_id, seq, "Duplicate Packet")
        elif seq < client.packet_number:
            close_client(session_id)
            return False
        return True

    while True:
        packet, remote_addr = _socket.recvfrom(Constants.BUFFER_SIZE)

        packet_header = packet[:Constants.HEADER_SIZE]
        magic_num, version, command, seq, session_id = util.unpack(packet_header)

        if magic_num == Constants.MAGIC_NUMBER and version == Constants.VERSION:
            if session_id in _client_data_map:
                if not check_client(session_id, seq):
                    continue

            if command == Constants.Command.HELLO.value:
                if session_id in _client_data_map:
                    close_client(session_id)
                    continue
                _client_data_map[session_id] = ClientData(session_id, remote_addr)
                send_packet(Constants.Command.HELLO.value, session_id, remote_addr)
                log(session_id, seq, "Session created")
                _client_data_map[session_id].timestamp = time.time()
            elif command == Constants.Command.DATA.value:
                data = packet[Constants.HEADER_SIZE:].decode("utf-8", "replace").rstrip()
                send_packet(Constants.Command.ALIVE.value, session_id, remote_addr)
                log(session_id, seq, data)
                _client_data_map[session_id].timestamp = time.time()
            elif command == Constants.Command.GOODBYE.value:
                if session_id not in _client_data_map:
                    continue
                send_packet(Constants.Command.GOODBYE.value, session_id, remote_addr)
                log(session_id, seq, "GOODBYE from client.")
                close_client(session_id)
            else:
                print("Invalid command: %d" % command)
                break
            if session_id in _client_data_map:
                _client_data_map[session_id].packet_number = seq


if __name__ == "__main__":
    portnum = int(sys.argv[1])
    address = (b"0.0.0.0", portnum)
    _socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    _socket.bind(address)

    print("Waiting on port %d..." % portnum)

    t1 = Thread(target=handle_socket, daemon=True)
    t1.start()

    handle_timer()

    handle_keyboard()
